// prisma/global.schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma-global"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* =========================
   Enums (your preferred names)
   ========================= */
enum OrgType {
  edu_group
  school
  bus_company
}

enum MembershipStatus {
  approved
  pending
  blocked
}

enum PartnershipStatus {
  active
  inactive
}

enum DataConnectionMode {
  SAAS
  BYODB
}

/* =========================
   Tenants
   (maps to existing table `tenants` with uuid id)
   ========================= */
model Tenant {
  id           String   @id @default(uuid())  // keep UUID from existing DB
  name         String
  slug         String   @unique
  status       String   @default("active")
  billingEmail String?  @map("billing_email")
  timezone     String?  @default("Asia/Dubai")
  plan         String?  @default("standard")
  createdAt    DateTime @default(now())       @map("created_at")
  updatedAt    DateTime @default(now())       @db.Timestamptz(6) @map("updated_at")

  organizations   Organization[]
  users           User[]
  partnerships    Partnership[]
  dataConnections DataConnection[]
  tripRegistry    TripRegistry[]

  @@map("tenants")
}

/* =========================
   Organizations (parent/child)
   (maps to `organizations`)
   ========================= */
model Organization {
  id           String   @id @default(uuid())
  tenantId     String   @map("tenant_id")
  tenant       Tenant   @relation(fields: [tenantId], references: [id])

  type         OrgType  @map("type")
  name         String
  slug         String   @unique
  code         String?
  parentOrgId  String?  @map("parent_org_id")
  parent       Organization?   @relation("OrgParent", fields: [parentOrgId], references: [id])
  children     Organization[]  @relation("OrgParent")

  email        String?
  phone        String?
  timezone     String?  @default("Asia/Dubai")

  createdAt    DateTime @default(now())       @map("created_at")
  updatedAt    DateTime @default(now())       @db.Timestamptz(6) @map("updated_at")

  memberships        UserOrgMembership[]
  scopedRolesAsOrg    UserOrgScope[] @relation("ScopeOnOrg")
  scopedRolesAsSchool UserOrgScope[] @relation("ScopeOnSchool")

  schoolPartnerships  Partnership[] @relation("SchoolRef")
  busPartnerships     Partnership[] @relation("BusRef")

  dataConnections     DataConnection[] @relation("OrgDataConnections")

  tripRegistryAsSchool  TripRegistry[] @relation("SchoolTrips")
  tripRegistryAsCompany TripRegistry[] @relation("CompanyTrips")

  @@index([tenantId])
  @@index([type])
  @@index([parentOrgId])
  @@map("organizations")
}

/* =========================
   Users directory (global/control-plane)
   (maps to `global_users`)
   ========================= */
model User {
  id             String   @id
  tenantId       String?  @map("tenant_id")
  tenant         Tenant?  @relation(fields: [tenantId], references: [id])

  email          String   @unique
  fullName       String?  @map("full_name")
  isActive       Boolean  @default(true)    @map("is_active")
  legacyUserId   Int?     @unique           @map("legacy_user_id")

  createdAt      DateTime @default(now())   @map("created_at")
  updatedAt      DateTime @default(now())   @db.Timestamptz(6) @map("updated_at")

  memberships    UserOrgMembership[]
  roleScopes     UserOrgScope[]

  @@index([tenantId])
  @@map("global_users")
}

/* =========================
   User ↔ Organization membership
   (your preferred name)  -> maps to `user_roles`
   ========================= */
model UserOrgMembership {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  orgId     String   @map("org_id")
  role      String
  status    MembershipStatus @default(pending)
  isDefault Boolean  @default(false)        @map("is_default")
  createdAt DateTime @default(now())        @map("created_at")

  user  User         @relation(fields: [userId], references: [id])
  org   Organization @relation(fields: [orgId], references: [id])

  @@unique([userId, orgId, role])
  @@index([orgId])
  @@map("user_roles")
}

/* =========================
   Fine-grained user scopes
   (maps to `user_role_scopes`)
   ========================= */
model UserOrgScope {
  userId       String   @map("user_id")
  orgId        String   @map("org_id")
  role         String
  schoolOrgId  String   @map("school_org_id")
  createdAt    DateTime @default(now())      @map("created_at")

  user   User          @relation(fields: [userId], references: [id])
  org    Organization  @relation("ScopeOnOrg",    fields: [orgId],       references: [id])
  school Organization  @relation("ScopeOnSchool", fields: [schoolOrgId], references: [id])

  @@id([userId, orgId, role, schoolOrgId])
  @@index([orgId])
  @@index([schoolOrgId])
  @@map("user_role_scopes")
}

/* =========================
   Partnerships (School ↔ Bus Company)
   (maps to `partnerships`)
   ========================= */
model Partnership {
  id               String   @id @default(uuid())
  tenantId         String   @map("tenant_id")
  tenant           Tenant   @relation(fields: [tenantId], references: [id])

  schoolOrgId      String   @map("school_org_id")
  school           Organization  @relation("SchoolRef", fields: [schoolOrgId], references: [id])

  busCompanyOrgId  String   @map("bus_company_org_id")
  busCompany       Organization  @relation("BusRef", fields: [busCompanyOrgId], references: [id])

  inHouse          Boolean  @default(false)
  operatorUserId   String?  @map("operator_user_id")
  status           PartnershipStatus @default(active)
  notes            String?

  createdAt        DateTime @default(now())         @map("created_at")
  updatedAt        DateTime @default(now())         @db.Timestamptz(6) @map("updated_at")

  @@unique([tenantId, schoolOrgId, busCompanyOrgId])
  @@index([tenantId])
  @@index([schoolOrgId])
  @@index([busCompanyOrgId])
  @@map("partnerships")
}

/* =========================
   Data connections (per org)
   (maps to `data_connections`)
   ========================= */
model DataConnection {
  id               String   @id @default(uuid())
  tenantId         String   @map("tenant_id")
  orgId            String   @map("org_id")
  mode             DataConnectionMode

  dbHost           String?  @map("db_host")
  dbPort           Int?     @map("db_port")
  dbName           String?  @map("db_name")
  dbUser           String?  @map("db_user")
  dbSchema         String?  @map("db_schema")
  dbSsl            Boolean? @map("db_ssl")
  vaultSecretId    String?  @map("vault_secret_id")

  lastVerifiedAt   DateTime? @map("last_verified_at")
  isActive         Boolean   @default(true) @map("is_active")

  createdAt        DateTime  @default(now())        @map("created_at")
  updatedAt        DateTime  @default(now())        @db.Timestamptz(6) @map("updated_at")

  tenant  Tenant        @relation(fields: [tenantId], references: [id])
  org     Organization  @relation("OrgDataConnections", fields: [orgId], references: [id])
  trips   TripRegistry[] @relation("TripRegistryConn")   // ← added relation name

  @@unique([orgId, mode])
  @@index([tenantId])
  @@index([orgId])
  @@map("data_connections")
}

/* =========================
   Trip registry (control-plane index of trips)
   (maps to `trip_registry`)
   ========================= */
model TripRegistry {
  id                 String   @id @default(uuid())
  tenantId           String   @map("tenant_id")
  tripCode           String   @map("trip_code")

  schoolOrgId        String   @map("school_org_id")
  busCompanyOrgId    String?  @map("bus_company_org_id")
  dataConnectionId   String   @map("data_connection_id")
  externalRef        String?  @map("external_ref")

  createdAt          DateTime @default(now())       @map("created_at")
  updatedAt          DateTime @default(now())       @db.Timestamptz(6) @map("updated_at")

  tenant            Tenant         @relation(fields: [tenantId], references: [id])
  schoolOrg         Organization   @relation("SchoolTrips",  fields: [schoolOrgId],     references: [id])
  companyOrg        Organization?  @relation("CompanyTrips", fields: [busCompanyOrgId], references: [id])
  dataConnection    DataConnection @relation("TripRegistryConn", fields: [dataConnectionId], references: [id])

  @@unique([tenantId, tripCode])
  @@index([tenantId])
  @@index([schoolOrgId])
  @@index([busCompanyOrgId])
  @@map("trip_registry")
}
