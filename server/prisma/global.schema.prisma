// prisma/global.schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma-global"
}

datasource db {
  provider = "postgresql"
  // If both live in the same DB, DATABASE_URL is enough.
  // If you split later, change this to env("GLOBAL_DATABASE_URL").
  url = env("DATABASE_URL")
}

/* ----------------------- Enums (map to existing Postgres enums) ----------------------- */

enum OrgType {
  SCHOOL       @map("school")
  BUS_COMPANY  @map("bus_company")
  PARENT_ORG   @map("parent_org")

  @@map("org_type")
}

enum RoleType {
  SCHOOL_STAFF @map("school_staff")
  BUS_COMPANY  @map("bus_company")
  ADMIN        @map("admin")
  FINANCE      @map("finance")

  @@map("role_type")
}

enum DataConnectionMode {
  SAAS
  BYODB

  @@map("data_connection_mode")
}

/* ----------------------- Tables (map to snake_case tables) ----------------------- */

model Tenants {
  id               String            @id @default(uuid())
  name             String
  slug             String            @unique
  created_at       DateTime          @default(now())
  updated_at       DateTime          @default(now()) @db.Timestamptz(6)

  organizations    Organizations[]
  users            Users[]
  partnerships     Partnerships[]
  data_connections DataConnections[]
  trip_registry    TripRegistry[]

  @@map("tenants")
}

model Organizations {
  id            String   @id @default(uuid())
  tenant_id     String
  name          String
  type          OrgType
  code          String?
  parent_org_id String?
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @db.Timestamptz(6)

  tenants    Tenants @relation(fields: [tenant_id], references: [id])

  // user roles -> organizations (single relation)
  user_roles UserRoles[]

  // partnerships: organizations is referenced twice, so we must name both relations
  partnerships_as_school     Partnerships[] @relation("SchoolPartnership")     // via Partnerships.school_org_id
  partnerships_as_buscompany Partnerships[] @relation("BusCompanyPartnership") // via Partnerships.bus_company_id

  // trip_registry: organizations is referenced twice too
  trip_registry_as_school  TripRegistry[] @relation("SchoolTrips")  // via TripRegistry.school_org_id
  trip_registry_as_company TripRegistry[] @relation("CompanyTrips") // via TripRegistry.bus_company_org_id

  @@unique([tenant_id, code])
  @@index([tenant_id])
  @@map("organizations")
}

model Users {
  id             String   @id              // mirrors auth.users.id
  tenant_id      String?
  email          String   @unique
  full_name      String?
  is_active      Boolean  @default(true)
  legacy_user_id Int?     @unique
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now()) @db.Timestamptz(6)

  tenants    Tenants?   @relation(fields: [tenant_id], references: [id])
  user_roles UserRoles[]

  @@index([tenant_id])
  @@map("users")
}

model UserRoles {
  // composite PK in the underlying table
  user_id    String
  org_id     String
  role       RoleType
  is_default Boolean  @default(false)
  created_at DateTime @default(now())

  users         Users         @relation(fields: [user_id], references: [id])
  organizations Organizations @relation(fields: [org_id], references: [id])

  @@id([user_id, org_id, role])
  @@index([org_id])
  @@map("user_roles")
}

model Partnerships {
  id             String   @id @default(uuid())
  tenant_id      String
  school_org_id  String
  bus_company_id String
  is_active      Boolean  @default(true)
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now()) @db.Timestamptz(6)

  tenants Tenants @relation(fields: [tenant_id], references: [id])

  // Two different relations to Organizations, each must be named and must
  // match the names used on the Organizations model.
  school_org  Organizations @relation("SchoolPartnership",     fields: [school_org_id],  references: [id])
  bus_company Organizations @relation("BusCompanyPartnership", fields: [bus_company_id], references: [id])

  @@unique([tenant_id, school_org_id, bus_company_id])
  @@index([tenant_id])
  @@map("partnerships")
}

model DataConnections {
  id               String             @id @default(uuid())
  tenant_id        String
  org_id           String
  mode             DataConnectionMode
  db_host          String?
  db_port          Int?
  db_name          String?
  db_user          String?
  db_schema        String?
  db_ssl           Boolean?
  vault_secret_id  String?
  last_verified_at DateTime?
  is_active        Boolean            @default(true)
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now()) @db.Timestamptz(6)

  tenants       Tenants       @relation(fields: [tenant_id], references: [id])
  organizations Organizations @relation(fields: [org_id], references: [id])
  trip_registry TripRegistry[]

  @@unique([org_id, mode])
  @@index([tenant_id])
  @@index([org_id])
  @@map("data_connections")
}

model TripRegistry {
  id                 String   @id @default(uuid())
  tenant_id          String
  trip_code          String
  school_org_id      String
  bus_company_org_id String?
  data_connection_id String
  external_ref       String?
  created_at         DateTime @default(now())
  updated_at         DateTime @default(now()) @db.Timestamptz(6)

  tenants Tenants @relation(fields: [tenant_id], references: [id])

  // Two different relations to Organizations; names must match Organizations model
  school_org  Organizations  @relation("SchoolTrips",  fields: [school_org_id],      references: [id])
  company_org Organizations? @relation("CompanyTrips", fields: [bus_company_org_id], references: [id])

  data_connections DataConnections @relation(fields: [data_connection_id], references: [id])

  @@unique([tenant_id, trip_code])
  @@index([tenant_id])
  @@index([school_org_id])
  @@index([bus_company_org_id])
  @@map("trip_registry")
}
