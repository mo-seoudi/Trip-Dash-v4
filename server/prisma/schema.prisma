// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")  // pooler (6543) for runtime
  directUrl = env("DIRECT_URL")    // direct (5432) for migrations
}

// USERS
model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  passwordHash String?
  role         String   @default("school_staff") // e.g. "admin", "finance", ...
  status       String   @default("pending")      // "approved" | "pending" | "blocked"
  createdAt    DateTime @default(now())

  // Trips created by this user
  trips Trip[] @relation("TripsByUser")

  @@map("User")
}

// TRIPS
model Trip {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // creator info (stored snapshot on doc)
  createdBy       String?
  createdByEmail  String?
  createdById     Int?
  createdByUser   User?    @relation("TripsByUser", fields: [createdById], references: [id])

  // main trip fields (UI)
  tripType      String?
  destination   String?
  date          DateTime?
  departureTime String?
  returnDate    DateTime?
  returnTime    String?
  students      Int?
  status        String?
  price         Float?
  notes         String?
  cancelRequest Boolean? @default(false)

  // flexible JSON
  busInfo   Json?
  driverInfo Json?
  buses     Json?

  // self-relation
  parentId Int?
  parent   Trip?   @relation("TripSelf", fields: [parentId], references: [id])
  children Trip[]  @relation("TripSelf")

  // back-relation to SubTrip
  subTripDocs SubTrip[] @relation("TripToSubTrip")
  
  // NEW: back-relation to TripPassenger rows
  tripPassengers  TripPassenger[]

  @@index([createdAt])
  @@index([status])
  @@index([createdBy])
  @@index([destination])
  @@map("Trip")
}

model TripPassenger {
  id            Int       @id @default(autoincrement())
  tripId        Int
  trip          Trip      @relation(fields: [tripId], references: [id])

  createdAt     DateTime  @default(now())
  fullName      String
  grade         String?
  guardianName  String?
  guardianPhone String?
  pickupPoint   String?
  dropoffPoint  String?
  seatNumber    String?
  notes         String?
  checkedIn     Boolean   @default(false)
  checkedOut    Boolean   @default(false)

  payments      TripPassengerPayment[]

  @@index([tripId])
  @@map("TripPassenger")
}

model TripPassengerPayment {
  id               Int            @id @default(autoincrement())
  tripPassengerId  Int
  passenger        TripPassenger  @relation(fields: [tripPassengerId], references: [id])

  createdAt        DateTime       @default(now())
  amountDue        Float
  amountPaid       Float?         @default(0)
  status           String?
  method           String?
  reference        String?
  currency         String?        @default("USD")

  @@index([tripPassengerId])
  @@map("TripPassengerPayment")
}

model Passenger {
  id        Int      @id @default(autoincrement())
  fullName  String   @unique
  grade     String?
  createdAt DateTime @default(now())

  @@map("Passenger")
}


// SUBTRIPS
model SubTrip {
  id           Int      @id @default(autoincrement())
  parentTripId Int
  parent       Trip     @relation("TripToSubTrip", fields: [parentTripId], references: [id])

  createdAt    DateTime @default(now())
  status       String?
  tripPrice    Float?
  busSeats     Int?
  busType      String?

  @@index([parentTripId])
  @@map("SubTrip")
}

// --- NEW: Stand-alone bus bookings (separate from trips) ---
model BusBooking {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // who created (mirrors pattern used in Trip)
  createdById      Int?
  createdByUser    User?     @relation(fields: [createdById], references: [id])
  createdBy        String?
  createdByEmail   String?

  // optional org linkage for future multi-tenant filtering
  orgId            String?

  // basics
  title            String?
  purpose          String?

  // schedule
  date             DateTime?     // start date (for calendar views)
  startTime        String?       // "08:00 AM"
  endDate          DateTime?     // usually same day; supports multi-day
  endTime          String?       // "03:30 PM"
  durationMinutes  Int?

  // passengers
  students         Int?    @default(0)
  adults           Int?    @default(0)
  totalPassengers  Int?

  // logistics
  pickupPoints     Json?   // [{ location, time }]
  dropoffPoints    Json?   // [{ location, time }]
  busesRequested   Int?
  busType          String?

  notes            String?
  status           String?  @default("Requested") // Requested | Approved | Rejected | Cancelled

  @@index([createdAt])
  @@index([status])
}
